/**
 * Voxel Shader for MagicaVoxel 0.98.2 generated by cellular-automata-voxel-shader 0.4.0
 * 
 * Rule format : extended-life
 * Rule : E 4..6 / 6 von-neumann
 * Out of bound value : 0
 */

// console command
// 'xs -n [iterations] shadername' : e.g. 'xs -n 20 shadername'

// shader inputs
// uniform vec3    iVolumeSize;    // volume size [1-126]
// uniform float   iColorIndex;    // current color index [1-255]
// uniform vec3    iMirror;        // current mirror mode [0-1]
// uniform vec3    iAxis;          // current axis mode [0-1]
// uniform float   iFrame;         // current frame
// uniform float   iNumFrames;     // total number of frames
// uniform float   iIter;          // current frame
// uniform vec4    iRand;          // random numbers
// uniform float   iArgs[8];       // user args

// built-in functions
// float voxel(vec3 v);

int getVoxel(const in vec3 currentPos, const in vec3 add) {
  vec3 voxelPos = (currentPos + add) ;
  if(voxelPos.x < 0. || voxelPos.y < 0. || voxelPos.z < 0. || voxelPos.x >= iVolumeSize.x || voxelPos.y >= iVolumeSize.y || voxelPos.z >= iVolumeSize.z) {
    return 0;
  } else {
    return int(voxel(voxelPos));
  }
}

int getNeighbourhood (const in vec3 currentPos) {
  int sum = 0;

  sum += getVoxel(currentPos, vec3(-1.0, 0.0, 0.0)) > 0 ? 1 : 0;
  sum += getVoxel(currentPos, vec3(0.0, -1.0, 0.0)) > 0 ? 1 : 0;
  sum += getVoxel(currentPos, vec3(0.0, 0.0, -1.0)) > 0 ? 1 : 0;
  sum += getVoxel(currentPos, vec3(0.0, 0.0, 1.0)) > 0 ? 1 : 0;
  sum += getVoxel(currentPos, vec3(0.0, 1.0, 0.0)) > 0 ? 1 : 0;
  sum += getVoxel(currentPos, vec3(1.0, 0.0, 0.0)) > 0 ? 1 : 0;

  return sum;
}

int process(const in int currentValue, const in vec3 position) {
  int sum = getNeighbourhood(position);
  float sumAdd = clamp(iArgs[0], 0., 1.);
  if (currentValue == 0 && sum == 6) {
    return 1 + int(float(sum) * sumAdd);
  } else if (currentValue > 0 && (sum >= 4 && sum <= 6)) {
    return 1 + int(float(sum) * sumAdd);
  }
  return 0;
}

float map(vec3 v) {
  int currentValue = int(voxel(v));
  return float(process(currentValue, v));
}
